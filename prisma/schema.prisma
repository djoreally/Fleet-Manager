// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id              String    @id @default(cuid())
  name            String
  businessAddress String?
  businessPhone   String?
  logoImage       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  users           User[]
  vehicles        Vehicle[]
  customers       Customer[]
  inspections     Inspection[]
  templates       ChecklistTemplate[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // For custom authentication
  name      String?
  phone     String?
  role      String   @default("technician") // e.g., 'manager', 'technician'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  inspections   Inspection[]
}

model Vehicle {
  id                       String       @id @default(cuid())
  make                     String
  model                    String
  year                     Int
  mileage                  Int
  vin                      String       @unique
  licensePlate             String
  oilFilterPartNumber      String?
  airFilterPartNumber      String?
  cabinAirFilterPartNumber String?
  fuelFilterPartNumber     String?
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  tenant                   Tenant       @relation(fields: [tenantId], references: [id])
  tenantId                 String
  inspections              Inspection[]
}

model Customer {
  id          String       @id @default(cuid())
  name        String
  phone       String?
  email       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  tenantId    String
  inspections Inspection[]
}

model ChecklistTemplate {
  id        String   @id @default(cuid())
  name      String
  items     Json // Storing checklist items as a JSON blob for simplicity
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  inspections   Inspection[]
}

model Inspection {
  id                    String            @id @default(cuid())
  inspectionDate        DateTime
  checklist             Json
  overallNotes          String?
  status                String            @default("draft") // 'draft', 'sent'
  latitude              Float?
  longitude             Float?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  tenant                Tenant            @relation(fields: [tenantId], references: [id])
  tenantId              String

  vehicle               Vehicle           @relation(fields: [vehicleId], references: [id])
  vehicleId             String

  inspector             User              @relation(fields: [inspectorId], references: [id])
  inspectorId           String

  customer              Customer?         @relation(fields: [customerId], references: [id])
  customerId            String?

  checklistTemplate     ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id])
  checklistTemplateId   String
}